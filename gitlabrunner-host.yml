Description: Creates an EC2 with GitLab Runner in eu-west-1.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcId          
          - PrivateSubnetId

      - Label:
          default: "Remote access"
        Parameters:
          - RemoteAccess
          - SshKeyName
          - SshCidr

      - Label: 
          default: "Host Settings"
        Parameters: 
          - ImageId
          - InstanceType          
          - DiskSize

      - Label: 
          default: "Runner Settings"
        Parameters: 
          - RunnerName
          - GitLabRegistrationToken          
          - GitlabServer
          - ConcurrentRunners

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to use for the runner.

  PrivateSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet to place the runner host in.

  RemoteAccess:
    Type: String
    Default: No
    AllowedValues:
      - Yes
      - No

  SshCidr:
    Type: String
    Description: (Only required if RemoteAccess is Yes) The Cidr the runner host can be accessed from. Don't use "0.0.0.0/0", use a Bastion host Cidr instead.

  InstanceType:
    Type: String
    Default: t2.small
    Description: The type of the machine.

  SshKeyName:
    Type: String
    Default: ""
    Description: (Only required if RemoteAccess is Yes) The key to be associated with the machine.    
    
  DiskSize:
    Type: String
    Default: 100
    Description: The size of the volume (in GB) that will be connected to the instance.

  RunnerName:
      Type: String
      Description: Runner name
      MinLength: 2          

  GitLabRegistrationToken:
    Type: String    
    Description: GitLab registration token form one of your repositories (repo -> Settings -> CI/CD -> Runner settings -> Registration token under specific runners).
    NoEcho: true

  GitlabServer:
     Type: String
     Description: The Gitlab server to connect to.
     Default: https://gitlab.com/

  ConcurrentRunners:
    Type: Number
    Description: The number of max concurrent runners the host can handle
    Default: 4
    MinValue: 1
    MaxValue: 20

Mappings:
  #  These are variants of the Amazon Linux AMI with Ubuntu 16.04 LTS. Taken from https://cloud-images.ubuntu.com/locator/ec2/.
  AmazonLinuxAMI:
    ap-south-1:
        AMI: ami-dba580b4
    us-east-1:
        AMI: ami-6dfe5010
    ap-northeast-1:
        AMI: ami-60a4b21c
    eu-west-1:
        AMI: ami-74e6b80d
    ap-southeast-1:
        AMI: ami-82c9ecfe
    ca-central-1:
        AMI: ami-9d7afcf9
    us-west-1:
        AMI: ami-493f2f29
    eu-central-1:
        AMI: ami-cd491726
    sa-east-1:
        AMI: ami-5782d43b
    cn-north-1:
        AMI: ami-fd0e1a9f
    us-gov-west-1:
        AMI: ami-fb77e29a
    ap-southeast-2:
        AMI: ami-5b10de39
    eu-west-2:
        AMI: ami-0871906f
    ap-northeast-2:
        AMI: ami-d0208fbe
    us-west-2:
        AMI: ami-5c97f024
    us-east-2:
        AMI: ami-4c281829       
    eu-west-3:
        AMI: ami-9a03b5e7

Conditions:
  HasKeyName:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: SshKeyName

  Remote: !Equals [ !Ref RemoteAccess, "Yes" ]

Resources:
  GitlabRunnerHost:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref GitlabRunnerInstanceProfile 
      ImageId: !FindInMap [AmazonLinuxAMI, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: 
        Fn::If:
        - HasKeyName
        - Ref: SshKeyName
        - Ref: AWS::NoValue
      SubnetId: !Ref PrivateSubnetId
      SecurityGroupIds:
      - !Ref GitlabRunnerSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${RunnerName}-gitlab-runner-host
      - Key: AlwaysOn
        Value: true
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize:
            Ref: DiskSize
          VolumeType: gp2
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash -xe
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y docker-ce

          curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | bash
          apt-get -y install gitlab-runner
          
          apt-get install -y awscli

          # Configure gitlab-runner to accept up to number of concurrent runners defined in parameter ConcurrentRunners
          sed -i.bak -r '/^concurrent = /s/[0-9]+/${ConcurrentRunners}/' /etc/gitlab-runner/config.toml

          # Create a default cache directory for the cache-runner
          mkdir /cache

          # Register a vanilla-runner. This runner is suitable e.g. for all other containers not needing docker commands.
          gitlab-runner register -n -u ${GitlabServer} -r ${GitLabRegistrationToken} --name ${RunnerName}-vanilla --tag-list "vanilla" --executor docker --docker-image "alpine:latest" 

          # Register a docker-runner. This runner is suitable e.g. for containers that need to make use of docker commands.  
          # Note! docker images will be cached on the gitlab runner host.  
          #gitlab-runner register -n -u ${GitlabServer} -r ${GitLabRegistrationToken} --name ${RunnerName}-docker --tag-list "docker" --executor docker --docker-image "docker:latest" --docker-volumes /var/run/docker.sock:/var/run/docker.sock

          # Register runner to GitLab server
          # Register a dind (docker in docker) runner. This runners is suitable for builds that needs to build docker images.  
          #gitlab-runner register -n -u ${GitlabServer} -r ${GitLabRegistrationToken} --name ${RunnerName}-dind --tag-list "dind" --executor docker --docker-image "docker:latest" --docker-privileged  

          # Register a cache-runner. This runner is suitable e.g. for all builds that need to cache NPM packages or similar.  
          # Note! NPM packages or similar will be cached on the gitlab runner host.  
          #gitlab-runner register -n -u ${GitlabServer} -r ${GitLabRegistrationToken} --name ${RunnerName}-cache --tag-list "cache" --executor docker --docker-image "alpine:latest" --docker-volumes /cache:/cache

  GitlabRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-GitlabRunnerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
      - !Ref GitlabRunnerPolicy

  GitlabRunnerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref GitlabRunnerRole
      InstanceProfileName: !Sub ${AWS::StackName}-GitlabRunnerInstanceProfile

  GitlabRunnerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-GitlabRunnerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
            - sts:AssumeRole
            Resource: "*"

  GitlabRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for GitLab Runner Host
      VpcId: !Ref VpcId      
      SecurityGroupEgress: #open for outbound traffic
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  SSHSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: Remote
    Properties:
      GroupId: !Ref 'GitlabRunnerSecurityGroup'    
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SshCidr
